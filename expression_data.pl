#!/usr/bin/perl

use warnings;
use Getopt::Long;
use 5.010;

my ( $destination, $expression_dir, $file_extention, $software, $fdr_cutoff,
	$reads_cutoff, $flag_debug, $flag_help );
$fdr_cutoff = 0.05;

my $help_message = "
This script prepares the expression results generated by a DEanalysis software for oncoIMPACT.

Usage:
	expression_data.pl [OPTIONS]

Options:
	--input = full path to folder containing expression results *
	--destination = full path to output folder *
	--extention = file extension of expression results *
	--software = DE analysis software used [DESeq / edgeR] *
	--fdr = Cutoff for FDR [Default: 0.05]
	--reads = Minimum read counts cutoff [Default: 200]
	--debug: prints trace to STDERR
	--help : prints this message 
	
* indicates required parameters	


Version:
	1.0

Author:
	Burton Chia - chiakhb\@gis.a-star.edu.sg
	Denis Bertrandd - bertrandd\@gis.a-star.edu.sg\n";

if ( @ARGV == 0 ) {
	print $help_message;
	exit 0;
}

GetOptions(
	"input=s"       => \$expression_dir,
	"destination=s" => \$destination,
	"extention=s"   => \$file_extention,
	"software=s"    => \$software,
	"fdr:f"         => \$fdr_cutoff,
	"reads:f"       => \$reads_cutoff,
	"debug"         => \$flag_debug,
	"help"          => \$flag_help
  )
  or die("Error in command line arguments.\n");

if ($flag_help) {
	print $help_message;
	exit 0;
}

if ($flag_debug) {
	print STDERR "[EXP] Input parameters:\n";
	print STDERR "[EXP] expression_dir: $expression_dir\n";
	print STDERR "[EXP] destination: $destination\n";
	print STDERR "[EXP] file_extension: $file_extention\n";
	print STDERR "[EXP] software: $software\n";
	print STDERR "[EXP] fdr_cutoff: $fdr_cutoff\n";
	print STDERR "[EXP] reads_cutoff: $reads_cutoff\n";
}

opendir( DIR, "$expression_dir" );
$time         = localtime();
@the_DATA_DIR = readdir(DIR);
close(DIR);

open( LOG, "> $destination/trace.log" );
print LOG "Time directory was read: $time\n";
print LOG "Contents of directory:\n";
print LOG join( "\n", @the_DATA_DIR );
close LOG;

foreach $res_file (@the_DATA_DIR) {
	if ( index( $res_file, ".$file_extention" ) != -1 ) {
		print STDERR "[EXP] *** READING FILE $res_file\n" if ($flag_debug);
		@ID = split( /\-/, $res_file );

		#print STDERR "\@ID:" . join(":", @ID) . ":\n";
		$sample_name = $ID[0] . "-" . $ID[1] . "-" . $ID[2] . "-" . $ID[3];
		$sample_dir  = "$destination/$sample_name";
		system("mkdir -p $sample_dir") unless ( -d $sample_dir );
		print STDERR "[EXP] *** WRINTING $sample_dir/EXPR_Data.txt\n"
		  if ($flag_debug);
		open( OUT,  ">$sample_dir/EXPR_Data.txt" );
		open( FILE, "$expression_dir/$res_file" );
		while (<FILE>) {
			chop $_;
			@line = split( /\t/, $_ );
			if ( @line > 4 ) {

				given ($software) {
					when ("DESeq") {
						$meanCounts  = $line[1];
						$fold_change = $line[2];
						$fdr         = $line[6];
						print STDERR "[EXP] mean_counts=$meanCounts :: fold_change=$fold_change :: fdr=$fdr\n" if ($flag_debug);
						if (   $fold_change ne "lfcSE"
							&& $fold_change ne "NA"
							&& $fdr         ne "NA"
							&& $fdr <= $fdr_cutoff
							&& $meanCounts >= $reads_cutoff )
						{
							$status = "UP";
							$status = "DOWN" if ( $fold_change < 0 );
							print OUT $line[0] . "_" . $status . "\t"
							  . $fold_change . "\n";
						}
					}
					when ("edgeR") {
						$fold_change = $line[1];
						$fdr         = $line[4];
						print STDERR
						  "[EXP] fold_change=$fold_change :: fdr=$fdr\n"
						  if ($flag_debug);
						if (   $fold_change ne "logFC"
							&& $fold_change ne "NA"
							&& $fdr         ne "NA"
							&& $fdr <= $fdr_cutoff )
						{
							$status = "UP";
							$status = "DOWN" if ( $fold_change < 0 );
							print OUT $line[0] . "_" . $status . "\t"
							  . $fold_change . "\n";
						}
					}
				}
			}
		}
		close OUT;
		close FILE;
	}
}
